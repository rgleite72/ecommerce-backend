name: CI

on:
  push:
    branches: [ main, dev ]
    tags:
      - 'v*'     # releases
      - 'rc-*'   # release candidates
  pull_request:
    branches: [ main ]   # roda em PRs para main

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  ci:
    name: Build, Lint & Test
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Print env info (debug)
        run: |
          node -v
          npm -v
          docker version
          docker compose version || true

      - name: Install dependencies
        run: npm ci

      - name: Up test DB (Docker Compose)
        run: docker compose -f docker-compose.test.yml up -d

      - name: Show compose state (debug)
        if: always()
        run: |
          echo "== docker compose ps =="
          docker compose -f docker-compose.test.yml ps || true
          echo "== docker ps =="
          docker ps -a || true

      - name: Wait for Postgres to be healthy
        run: |
          set -euxo pipefail
          PG_CID="$(docker compose -f docker-compose.test.yml ps -q | head -n1)"
          if [ -z "$PG_CID" ]; then
            echo "Nenhum container encontrado via docker compose. Listando todos:"
            docker ps -a
            exit 1
          fi
          echo "Container detectado: $PG_CID"
          for i in {1..30}; do
            if docker exec "$PG_CID" pg_isready -U postgres >/dev/null 2>&1; then
              echo "Postgres está pronto."
              exit 0
            fi
            echo "Aguardando Postgres... tentativas: $i/30"
            sleep 2
          done
          echo "Postgres não ficou pronto. Logs do container:"
          docker logs "$PG_CID" || true
          exit 1

      - name: Create .env.test file
        run: |
          echo "NODE_ENV=test" > .env.test
          echo "PORT=0" >> .env.test
          echo "DB_HOST=localhost" >> .env.test
          echo "DB_PORT=5433" >> .env.test
          echo "DB_USER=postgres" >> .env.test
          echo "DB_PASS=${{ secrets.DB_PASS }}" >> .env.test
          echo "DB_NAME=commerceBackdb_test" >> .env.test
          echo "JWT_ACCESS_SECRET=${{ secrets.JWT_ACCESS_SECRET }}" >> .env.test
          echo "JWT_REFRESH_SECRET=${{ secrets.JWT_REFRESH_SECRET }}" >> .env.test
          echo "JWT_ACCESS_EXPIRES=2m" >> .env.test
          echo "JWT_REFRESH_EXPIRES=10m" >> .env.test
          echo "BCRYPT_SALT_ROUNDS=4" >> .env.test
          echo "LOG_LEVEL=silent" >> .env.test
          echo "DISABLE_RATE_LIMIT=true" >> .env.test

      - name: Lint
        run: npm run lint

      - name: Typecheck
        run: npm run typecheck

      - name: Tests (unit + e2e)
        run: npm test

      - name: Tear down DB
        if: always()
        run: docker compose -f docker-compose.test.yml down -v
